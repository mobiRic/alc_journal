apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

ext {
    appVersions = [
            code: 1,
            name: '0.0.1'
    ]
    buildVersions = [
            compileSdk: 27,
            minSdk    : 16,
            targetSdk : 27,
    ]
    libVersions = [
            supportLib            : '27.1.1',
            architectureComponents: '1.1.1',
            crashlytics           : '2.9.4@aar',
            aacRoom               : '1.1.1',
            aboutLib              : '6.0.9',
    ]
    testVersions = [
            junit     : '4.12',
            testRunner: '1.0.2',
            espresso  : '3.0.2',
    ]
}

android {
    compileSdkVersion buildVersions.compileSdk
    defaultConfig {
        applicationId "mobi.glowworm.journal"

        minSdkVersion buildVersions.minSdk
        //noinspection OldTargetApi
        targetSdkVersion buildVersions.targetSdk
        versionCode appVersions.code
        versionName appVersions.name

        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // allow Crashlytics configuration based on build type - disable this in debug builds
        buildConfigField("boolean", "CRASHLYTICS", "true")

        /*BETA DISTRIBUTION FOR release BUILD*/
        ext.betaDistributionReleaseNotesFilePath = "extras/fabric/release_notes.txt"
        ext.betaDistributionEmailsFilePath = "extras/fabric/distribution.txt"
    }

    signingConfigs {
        debug {
            // keystore properties stored in an external file - these can be committed to the repo
            def keystorePropertiesFile = rootProject.file("./extras/key/keystore_debug.properties")
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
        release {
            // keystore properties stored in an external file - do not commit to repo
            def keystorePropertiesFile = rootProject.file("./extras/key/keystore_release.properties")
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            buildConfigField("boolean", "CRASHLYTICS", "false")
            ext.enableCrashlytics = false

            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'

            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /* Support Libraries */
    implementation "com.android.support:appcompat-v7:${libVersions.supportLib}"
    implementation "com.android.support:recyclerview-v7:${libVersions.supportLib}"
    implementation "com.android.support:support-annotations:${libVersions.supportLib}"
    implementation "com.android.support:cardview-v7:${libVersions.supportLib}"

    /* About Libraries */
    implementation("com.mikepenz:aboutlibraries:${libVersions.aboutLib}") {
        transitive = true
    }

    /* Architecture Components */
    implementation "android.arch.persistence.room:runtime:${libVersions.architectureComponents}"
    implementation "android.arch.lifecycle:extensions:${libVersions.architectureComponents}"
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    annotationProcessor "android.arch.persistence.room:compiler:${libVersions.architectureComponents}"
    annotationProcessor "android.arch.lifecycle:compiler:${libVersions.architectureComponents}"

    /*Firebase*/
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation 'com.firebaseui:firebase-ui-auth:4.0.0'

    /* Crashlytics */
    implementation("com.crashlytics.sdk.android:crashlytics:${libVersions.crashlytics}") {
        transitive = true;
    }

    /* Testing */
    testImplementation "junit:junit:${testVersions.junit}"
    androidTestImplementation "com.android.support.test:runner:${testVersions.testRunner}"
    androidTestImplementation "com.android.support.test:rules:${testVersions.testRunner}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${testVersions.espresso}"

    testImplementation "android.arch.persistence.room:testing:${libVersions.aacRoom}"
}

apply plugin: 'com.google.gms.google-services'